//! The data model for ChatGPT (and ChatGPT compatible) requests.
use std::collections::HashMap;

use serde::{Deserialize, Serialize};
use super::common::{Integer, Number};

#[derive(Debug, Clone, Default, Serialize)]
pub struct RequestBuilder {
    /// A list of messages comprising the conversation so far.
    pub messages: Vec<Message>,
    /// ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
    pub model: Option<String>,
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    ///
    /// [See more information about frequency and presence penalties](https://platform.openai.com/docs/guides/text-generation/parameter-details).
    pub frequency_penalty: Option<Number>,
    /// Modify the likelihood of specified tokens appearing in the completion.
    ///
    /// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    pub logit_bias: Option<HashMap<String, isize>>,
    /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message. This option is currently not available on the gpt-4-vision-preview model.
    pub logprobs: Option<bool>,
    /// An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
    pub top_logprobs: Option<Integer>,
    /// The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the chat completion.
    ///
    /// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
    pub max_tokens: Option<Integer>,
    /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    pub n: Option<Integer>,
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    ///
    /// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
    pub presence_penalty: Option<Number>,
    
    /// An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
    ///
    /// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
    ///
    /// Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    pub response_format: Option<ResponseFormat>,
    /// This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
    pub seed: Option<Integer>,
    /// Up to 4 sequences where the API will stop generating further tokens.
    pub stop: Option<Vec<String>>,
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code.](https://cookbook.openai.com/examples/how_to_stream_completions)
    pub stream: Option<bool>,
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    ///
    /// We generally recommend altering this or `top_p` but not both.
    pub temperature: Option<Number>,
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    ///
    /// We generally recommend altering this or temperature but not both.
    pub top_p: Option<Number>,
    /// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
    pub tools: Option<Vec<Tool>>,
    /// Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. Specifying a particular function via {"type": "function", "function": {"name": "my_function"}} forces the model to call that function.
    ///
    /// `none` is the default when no functions are present. auto is the default if functions are present.
    pub tool_choice: Option<ToolChoice>,
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
    pub user: Option<String>,
    /// Deprecated in favor of `tool_choice`.
    ///
    /// Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
    ///
    /// `none` is the default when no functions are present. `auto` is the default if functions are present.
    pub function_call: Option<()>,
    /// Deprecated in favor of `tools`.
    ///
    /// A list of functions the model may generate JSON inputs for.
    pub functions: Option<Number>,
}

impl RequestBuilder {
    /// A list of messages comprising the conversation so far.
    pub fn with_messages(mut self, messages: Vec<Message>) -> Self {
        self.messages = messages;
        self
    }
    /// ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
    pub fn with_model(mut self, model: impl AsRef<str>) -> Self {
        self.model = Some(model.as_ref().to_string());
        self
    }
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    ///
    /// [See more information about frequency and presence penalties](https://platform.openai.com/docs/guides/text-generation/parameter-details).
    pub fn with_frequency_penalty(mut self, frequency_penalty: Number) -> Self {
        self.frequency_penalty = Some(frequency_penalty);
        self
    }
    /// Modify the likelihood of specified tokens appearing in the completion.
    ///
    /// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    pub fn with_logit_bias(mut self, logit_bias: HashMap<String, isize>) -> Self {
        self.logit_bias = Some(logit_bias);
        self
    }
    /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message. This option is currently not available on the gpt-4-vision-preview model.
    pub fn with_logprobs(mut self, logprobs: bool) -> Self {
        self.logprobs = Some(logprobs);
        self
    }
    /// An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
    pub fn with_top_logprobs(mut self, top_logprobs: Integer) -> Self {
        self.top_logprobs = Some(top_logprobs);
        self
    }
    /// The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the chat completion.
    ///
    /// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
    pub fn with_max_tokens(mut self, max_tokens: Integer) -> Self {
        self.max_tokens = Some(max_tokens);
        self
    }
    /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    pub fn with_n(mut self, n: Integer) -> Self {
        self.n = Some(n);
        self
    }
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    ///
    /// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
    pub fn with_presence_penalty(mut self, presence_penalty: Number) -> Self {
        self.presence_penalty = Some(presence_penalty);
        self
    }
    /// An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
    ///
    /// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
    ///
    /// Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    pub fn with_response_format(mut self, response_format: ResponseFormat) -> Self {
        self.response_format = Some(response_format);
        self
    }
    /// This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
    pub fn with_seed(mut self, seed: Integer) -> Self {
        self.seed = Some(seed);
        self
    }
    /// Up to 4 sequences where the API will stop generating further tokens.
    pub fn with_stop(mut self, stop: Vec<String>) -> Self {
        self.stop = Some(stop);
        self
    }
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code.](https://cookbook.openai.com/examples/how_to_stream_completions)
    pub fn with_stream(mut self, stream: bool) -> Self {
        self.stream = Some(stream);
        self
    }
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    ///
    /// We generally recommend altering this or `top_p` but not both.
    pub fn with_temperature(mut self, temperature: Number) -> Self {
        self.temperature = Some(temperature);
        self
    }
    pub fn with_top_p(mut self, top_p: Number) -> Self {
        self.top_p = Some(top_p);
        self
    }
    /// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for
    pub fn with_tools(mut self, tools: Vec<Tool>) -> Self {
        self.tools = Some(tools);
        self
    }
    /// Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. Specifying a particular function via {"type": "function", "function": {"name": "my_function"}} forces the model to call that function.
    ///
    /// `none` is the default when no functions are present. auto is the default if functions are present.
    pub fn with_tool_choice(mut self, tool_choice: ToolChoice) -> Self {
        self.tool_choice = Some(tool_choice);
        self
    }
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
    pub fn with_user(mut self, user: impl AsRef<str>) -> Self {
        let user = user.as_ref().to_string();
        self.user = Some(user);
        self
    }
    /// Deprecated in favor of `tool_choice`.
    ///
    /// Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
    ///
    /// `none` is the default when no functions are present. `auto` is the default if functions are present.
    pub fn with_function_call(mut self, function_call: ()) -> Self {
        self.function_call = Some(function_call);
        self
    }
    /// Deprecated in favor of `tools`.
    ///
    /// A list of functions the model may generate JSON inputs for.
    pub fn with_functions(mut self, functions: Number) -> Self {
        self.functions = Some(functions);
        self
    }
    pub fn build(self) -> Option<Request> {
        let model = self.model?;
        let messages = self.messages;
        if messages.is_empty() {
            return None
        }
        let request = Request {
            messages,
            model,
            frequency_penalty: self.frequency_penalty,
            logit_bias: self.logit_bias,
            logprobs: self.logprobs,
            top_logprobs: self.top_logprobs,
            max_tokens: self.max_tokens,
            n: self.n,
            presence_penalty: self.presence_penalty,
            response_format: self.response_format,
            seed: self.seed,
            stop: self.stop,
            stream: self.stream,
            temperature: self.temperature,
            top_p: self.top_p,
            tools: self.tools,
            tool_choice: self.tool_choice,
            user: self.user,
            function_call: self.function_call,
            functions: self.functions,
        };
        Some(request)
    }
}

/// STATUS: Currently some fields are kipped.
#[derive(Debug, Clone, Serialize)]
pub struct Request {
    /// A list of messages comprising the conversation so far.
    pub messages: Vec<Message>,
    /// ID of the model to use. See the [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
    pub model: String,
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    ///
    /// [See more information about frequency and presence penalties](https://platform.openai.com/docs/guides/text-generation/parameter-details).
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub frequency_penalty: Option<Number>,
    /// Modify the likelihood of specified tokens appearing in the completion.
    ///
    /// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub logit_bias: Option<HashMap<String, isize>>,
    /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message. This option is currently not available on the gpt-4-vision-preview model.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub logprobs: Option<bool>,
    /// An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. logprobs must be set to true if this parameter is used.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub top_logprobs: Option<Integer>,
    /// The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the chat completion.
    ///
    /// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub max_tokens: Option<Integer>,
    /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub n: Option<Integer>,
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    ///
    /// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation/parameter-details)
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub presence_penalty: Option<Number>,
    /// An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
    ///
    /// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
    ///
    /// Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub response_format: Option<ResponseFormat>,
    /// This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub seed: Option<Integer>,
    /// Up to 4 sequences where the API will stop generating further tokens.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub stop: Option<Vec<String>>,
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code.](https://cookbook.openai.com/examples/how_to_stream_completions)
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub stream: Option<bool>,
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    ///
    /// We generally recommend altering this or `top_p` but not both.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub temperature: Option<Number>,
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    ///
    /// We generally recommend altering this or temperature but not both.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub top_p: Option<Number>,
    /// A list of tools the model may call.
    /// 
    /// Currently, only functions are supported as a tool.
    /// 
    /// Use this to provide a list of functions the model may generate JSON inputs for.
    /// 
    /// **Currently we don’t serialize this field. It’s skipped.**
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub tools: Option<Vec<Tool>>,
    /// Controls which (if any) function is called by the model. none means the model will not call a function and instead generates a message. auto means the model can pick between generating a message or calling a function. Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.
    ///
    /// `none` is the default when no functions are present. auto is the default if functions are present.
    /// 
    /// **Currently we don’t serialize this field. It’s skipped.**
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub tool_choice: Option<ToolChoice>,
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub user: Option<String>,
    /// Deprecated in favor of `tool_choice`.
    ///
    /// Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
    ///
    /// `none` is the default when no functions are present. `auto` is the default if functions are present.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub function_call: Option<()>,
    /// Deprecated in favor of `tools`.
    ///
    /// A list of functions the model may generate JSON inputs for.
    #[serde(skip_serializing_if = "Option::is_none")]
    #[serde(default)]
    pub functions: Option<Number>,
}


/// Use one of the constructors, i.e. `ResponseFormat::TEXT` or `ResponseFormat::JSON_OBJECT`.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ResponseFormat {
    r#type: internal::ResponseFormatType,
}

impl ResponseFormat {
    pub const TEXT: Self = ResponseFormat {
        r#type: internal::ResponseFormatType::Text
    };
    pub const JSON_OBJECT: Self = ResponseFormat {
        r#type: internal::ResponseFormatType::JsonObject
    };
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "role")]
#[serde(rename_all = "snake_case")]
pub enum Message {
    System {
        content: String,
        /// Currently we don’t serialize this field. It’s skipped..
        #[serde(skip_serializing_if = "Option::is_none")]
        #[serde(default)]
        name: Option<String>,
    },
    User {
        content: String,
        /// Currently we don’t serialize this field. It’s skipped.
        #[serde(skip_serializing_if = "Option::is_none")]
        #[serde(default)]
        name: Option<String>,
    },
    Assistant {
        content: String,
        /// Currently we don’t serialize this field. It’s skipped.
        #[serde(skip_serializing_if = "Option::is_none")]
        #[serde(default)]
        name: Option<String>,
        #[serde(skip_serializing_if = "Option::is_none")]
        tool_calls: Option<Vec<()>>,
        #[serde(skip_serializing_if = "Option::is_none")]
        function_call: Option<()>,
    },
    Tool {
        content: String,
        tool_call_id: String,
    },
    Function {
        content: String,
        name: String,
    },
}

impl Message {
    pub fn system(content: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        Message::System {
            content,
            name: None,
        }
    }
    pub fn user(content: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        Message::User {
            content,
            name: None,
        }
    }
    pub fn assistant(content: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        Message::Assistant {
            content,
            name: None,
            tool_calls: None,
            function_call: None,
        }
    }
    pub fn named_system(name: impl AsRef<str>, content: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        Message::System {
            content,
            name: Some(name.as_ref().to_string()),
        }
    }
    pub fn named_user(name: impl AsRef<str>, content: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        Message::User {
            content,
            name: Some(name.as_ref().to_string()),
        }
    }
    pub fn named_assistant(name: impl AsRef<str>, content: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        Message::Assistant {
            content,
            name: Some(name.as_ref().to_string()),
            tool_calls: None,
            function_call: None,
        }
    }
    pub fn tool(content: impl AsRef<str>, tool_call_id: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        let tool_call_id = tool_call_id.as_ref().to_string();
        Message::Tool { content, tool_call_id }
    }
    pub fn function(content: impl AsRef<str>, name: impl AsRef<str>) -> Self {
        let content = content.as_ref().to_string();
        let name = name.as_ref().to_string();
        Message::Function { content, name }
    }
}

pub mod internal {
    use serde::{Serialize, Deserialize};

    #[derive(Debug, Clone, Serialize, Deserialize)]
    #[serde(rename_all = "snake_case")]
    pub enum ResponseFormatType {
        Text,
        JsonObject,
    }
}

#[derive(Debug, Clone, Serialize)]
pub struct Tool {
    pub r#type: String,
    pub function: Function,
}

#[derive(Debug, Clone, Serialize)]
pub struct Function {
    pub description: Option<String>,
    pub name: String,
    pub parameters: Option<String>,
}

#[derive(Debug, Clone, Serialize)]
pub enum ToolChoice {
    
}

#[derive(Debug, Clone)]
#[allow(non_camel_case_types)]
pub enum OctoAiModels {
    /// # `llama-2-13b-chat-fp16`
    llama_2_13b_chat_fp16,
    /// # `llama-2-70b-chat-fp16`
    llama_2_70b_chat_fp16,
    /// # `llama-2-70b-chat-int4`
    llama_2_70b_chat_int4,
    /// # `codellama-7b-instruct-fp16`
    codellama_7b_instruct_fp16,
    /// # `codellama-13b-instruct-fp16`
    codellama_13b_instruct_fp16,
    /// # `codellama-34b-instruct-fp16`
    codellama_34b_instruct_fp16,
    /// # `codellama-34b-instruct-int4`
    codellama_34b_instruct_int4,
    /// # `codellama-70b-instruct-fp16`
    codellama_70b_instruct_fp16,
    /// # `mistral-7b-instruct-fp16`
    mistral_7b_instruct_fp16,
    /// # `mixtral-8x7b-instruct-fp16`
    mixtral_8x7b_instruct_fp16,
    /// # `llamaguard-7b-fp16`
    llamaguard_7b_fp16,
}

#[derive(Debug, Clone)]
#[allow(non_camel_case_types)]
pub enum OpenAiModels {
    /// # GPT-4 Turbo
    /// # `gpt-4-0125-preview`
    /// The latest GPT-4 model intended to reduce cases of “laziness” where the model doesn’t complete a task. Returns a maximum of 4,096 output tokens.
    gpt_4_0125_preview,
    /// # `gpt-4-turbo-preview`
    /// 
    //// Currently points to `gpt-4-0125-preview`.
    gpt_4_turbo_preview,
    /// # `gpt-4-1106-preview`
    /// GPT-4 Turbo model featuring improved instruction following, JSON mode, reproducible outputs, parallel function calling, and more. Returns a maximum of 4,096 output tokens. This preview model is not yet suited for production traffic.
    gpt_4_1106_preview,
    /// # `gpt-4-vision-preview`
    /// GPT-4 with the ability to understand images, in addition to all other GPT-4 Turbo capabilities. Returns a maximum of 4,096 output tokens. This is a preview model version and not suited yet for production traffic.
    gpt_4_vision_preview,
    /// # `gpt-4`
    /// Currently points to gpt-4-0613.
    gpt_4,
    /// # `gpt-4-0613`
    /// Snapshot of gpt-4 from June 13th 2023 with improved function calling support.
    gpt_4_0613,
    /// # `gpt-4-32k`
    /// Currently points to gpt-4-32k-0613. See continuous model upgrades. This model was never rolled out widely in favor of GPT-4 Turbo.
    gpt_4_32k,
    /// # `gpt-4-32k-0613`
    /// Snapshot of gpt-4-32k from June 13th 2023 with improved function calling support. This model was never rolled out widely in favor of GPT-4 Turbo.
    gpt_4_32k_0613,
    /// # `gpt-3.5-turbo-0125`
    /// # Updated GPT 3.5 Turbo
    /// The latest GPT-3.5 Turbo model with higher accuracy at responding in requested formats and a fix for a bug which caused a text encoding issue for non-English language function calls. Returns a maximum of 4,096 output tokens.
    gpt_3_5_turbo_0125,
    /// # `gpt-3.5-turbo`
    /// Currently points to gpt-3.5-turbo-0613. The gpt-3.5-turbo model alias will be automatically upgraded from gpt-3.5-turbo-0613 to gpt-3.5-turbo-0125 on February 16th.
    gpt_3_5_turbo,
    /// # `gpt-3.5-turbo-1106`
    /// GPT-3.5 Turbo model with improved instruction following, JSON mode, reproducible outputs, parallel function calling, and more. Returns a maximum of 4,096 output tokens.
    gpt_3_5_turbo_1106,
    /// # `gpt-3.5-turbo-instruct`
    /// Similar capabilities as GPT-3 era models. Compatible with legacy Completions endpoint and not Chat Completions.
    gpt_3_5_turbo_instruct,
}

impl AsRef<str> for OctoAiModels {
    fn as_ref(&self) -> &str {
        match self {
            OctoAiModels::llama_2_13b_chat_fp16 => "llama-2-13b-chat-fp16",
            OctoAiModels::llama_2_70b_chat_fp16 => "llama-2-70b-chat-fp16",
            OctoAiModels::llama_2_70b_chat_int4 => "llama-2-70b-chat-int4",
            OctoAiModels::codellama_7b_instruct_fp16 => "codellama-7b-instruct-fp16",
            OctoAiModels::codellama_13b_instruct_fp16 => "codellama-13b-instruct-fp16",
            OctoAiModels::codellama_34b_instruct_fp16 => "codellama-34b-instruct-fp16",
            OctoAiModels::codellama_34b_instruct_int4 => "codellama-34b-instruct-int4",
            OctoAiModels::codellama_70b_instruct_fp16 => "codellama-70b-instruct-fp16",
            OctoAiModels::mistral_7b_instruct_fp16 => "mistral-7b-instruct-fp16",
            OctoAiModels::mixtral_8x7b_instruct_fp16 => "mixtral-8x7b-instruct-fp16",
            OctoAiModels::llamaguard_7b_fp16 => "llamaguard-7b-fp16",
        }
    }
}
impl AsRef<str> for OpenAiModels {
    fn as_ref(&self) -> &str {
        match self {
            OpenAiModels::gpt_4_0125_preview => "gpt-4-0125-preview",
            OpenAiModels::gpt_4_turbo_preview => "gpt-4-turbo-preview",
            OpenAiModels::gpt_4_1106_preview => "gpt-4-1106-preview",
            OpenAiModels::gpt_4_vision_preview => "gpt-4-vision-preview",
            OpenAiModels::gpt_4 => "gpt-4",
            OpenAiModels::gpt_4_0613 => "gpt-4-0613",
            OpenAiModels::gpt_4_32k => "gpt-4-32k",
            OpenAiModels::gpt_4_32k_0613 => "gpt-4-32k-0613",
            OpenAiModels::gpt_3_5_turbo_0125 => "gpt-3.5-turbo-0125",
            OpenAiModels::gpt_3_5_turbo => "gpt-3.5-turbo",
            OpenAiModels::gpt_3_5_turbo_1106 => "gpt-3.5-turbo-1106",
            OpenAiModels::gpt_3_5_turbo_instruct => "gpt-3.5-turbo-instruct",
        }
    }
}
